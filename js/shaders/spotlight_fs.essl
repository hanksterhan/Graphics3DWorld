Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
  precision highp float;

  out vec4 fragmentColor;
  in vec2 texCoord; // passed from VS
  in vec3 worldNormal;
  in vec4 worldPosition;  
  // we need to bind texture to this
  uniform sampler2D colorTexture;

  uniform struct  {
  	vec3 position;
  } camera;

  uniform struct {
    vec4 position[8]; // xyz is the direction, w is 0 for direction light, 1 for point light
    vec4 powerDensity[8];  // w ignored
  } lighting;

  void main(void) {
  	vec3 normal = normalize(worldNormal);
  	// vec3 position = worldPosition.xyz / worldPosition.w; 
    vec3 position = vec3(0, 3, 0);
    vec3 viewDir = normalize(camera.position - position);
  	//vec3 viewDir = vec3(1, 1, 1);

    for(int i=0; i<2; ++i){
        vec3 powerDensity = lighting.powerDensity[i].rgb / (pow(length(lighting.position[i].xyz - (worldPosition.xyz* lighting.position[i].w)), 2.0));
        vec3 lightDir = normalize(lighting.position[i].xyz - (worldPosition.xyz * lighting.position[i].w));

        fragmentColor.rgb += powerDensity * texture(colorTexture, texCoord).rgb * dot(worldNormal, lightDir);
        fragmentColor.a = 1.0;
    }
  }

`;